#
# ***** BEGIN LICENSE BLOCK *****
# Zimbra Collaboration Suite Zimlets
# Copyright (C) 2011, 2013, 2014, 2016 Synacor, Inc.
#
# This program is free software: you can redistribute it and/or modify it under
# the terms of the GNU General Public License as published by the Free Software Foundation,
# version 2 of the License.
#
# This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY;
# without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
# See the GNU General Public License for more details.
# You should have received a copy of the GNU General Public License along with this program.
# If not, see <https://www.gnu.org/licenses/>.
# ***** END LICENSE BLOCK *****

label = Google \u0bb5\u0bb0\u0bc8\u0baa\u0b9f\u0bae\u0bcd
description = Google \u0bb5\u0bb0\u0bc8\u0baa\u0b9f\u0ba4\u0bcd\u0ba4\u0bc8\u0baa\u0bcd \u0baa\u0baf\u0ba9\u0bcd\u0baa\u0b9f\u0bc1\u0ba4\u0bcd\u0ba4\u0bbf \u0bae\u0bc1\u0b95\u0bb5\u0bb0\u0bbf\u0b95\u0bb3\u0bc8\u0ba4\u0bcd \u0ba4\u0ba9\u0bbf\u0baa\u0bcd\u0baa\u0b9f\u0bc1\u0ba4\u0bcd\u0ba4\u0bc1\u0bae\u0bcd \u0bae\u0bb1\u0bcd\u0bb1\u0bc1\u0bae\u0bcd \u0bae\u0bc1\u0ba9\u0bcd\u0ba9\u0bcb\u0b9f\u0bcd\u0b9f\u0bae\u0bcd \u0b95\u0bbe\u0b9f\u0bcd\u0b9f\u0bc1\u0bae\u0bcd.

##########################################################################################
# define the map display language

mapLanguage=



###########################################################################################
#completeAddressRegex - Contains RegEx to uniquely match an address. 
#
#If this is not blank, the zimlet uses: completeAddressRegex
#If this is blank, then the Zimlet uses: addressFirstPartRegEx AND (zipCodeRegEx OR countryNameRegEx)
#
#PS: In most non-english speaking countries(like Japanese), just populating this should be enough.
###########################################################################################
completeAddressRegex = 


###########################################################################################
#addressFirstPartRegEx is the regex to match the main/first part of the address *excluding* Zip code or countryName)
#This will be concatenated with zipCodeRegEx(to include zipcodes and then with countryNameRegEx(to include countrynames, as
# at times zipcodes will be missing but only country names are available).
#Matches a word with numbers followed by up to 9 words. PS: This will be concatenated with zipCodeRegEx.
#E.x. 1500 fashion island blvd, suite 200
#REGEX DEV NOTES:
#IE hangs if we regex backtracks(when there condition appears(starts to match) but at the end actually doesnt(fails).
#To avoid backtracking, use lazy and atomic groups.
#?? means lazy(instead of greedy). (?=(2-9words)\1 simulates "Atomic Groups"
###########################################################################################
addressFirstPartRegEx = \\d+?-??\\d{0,5},??\\s(?=((\\w+\\W+){2,9}))\\1
###########################################################################################
#zipCodeRegEx allows matching zip codes.
#
# Internally Zimlet will load all the regexes in the following fashion:
# "mainAddressRegEx AND (zipCodeRegEx OR countryNameRegEx)"
#
###########################################################################################


#The following matches US Zip codes
#  (\\d{5,7}(-\\d{4,5})?)
#The following matches Canadian and EU zip codes which is 2, 3-letters alpha-numeric words  for example: "7L7 T2E"
#(([a-zA-Z]{1,2}\\d{1,2}[a-zA-Z]{1,2}\\s?)|(\\d{1,2}[a-zA-Z]{1,2}\\d{1,2}\\s?))+

zipCodeRegEx = (\\d{5,7}(-\\d{4,5})?)|(([a-zA-Z]{1,2}\\d{1,2}[a-zA-Z]{1,2}\\s?)|(\\d{1,2}[a-zA-Z]{1,2}\\d{1,2}\\s?))+


#Matches Country names. Used instead of zip code and when they are missing.
countryNameRegEx = (\u0b86\u0bb8\u0bcd\u0ba4\u0bbf\u0bb0\u0bbf\u0baf\u0bbe|\u0baa\u0bc6\u0bb2\u0bcd\u0b9c\u0bbf\u0baf\u0bae\u0bcd|\u0baa\u0bb2\u0bcd\u0b95\u0bc7\u0bb0\u0bbf\u0baf\u0bbe|\u0b95\u0bc1\u0bb0\u0bc7\u0bbe\u0b9a\u0bbf\u0baf\u0bbe|\u0b9a\u0bc6\u0b95\u0bcd \u0b95\u0bc1\u0b9f\u0bbf\u0baf\u0bb0\u0b9a\u0bc1|\u0b9f\u0bc6\u0ba9\u0bcd\u0bae\u0bbe\u0bb0\u0bcd\u0b95\u0bcd|\u0baa\u0bbf\u0ba9\u0bcd\u0bb2\u0bbe\u0ba8\u0bcd\u0ba4\u0bc1|\u0baa\u0bbf\u0bb0\u0bbe\u0ba9\u0bcd\u0bb8\u0bcd|\u0b9c\u0bc6\u0bb0\u0bcd\u0bae\u0ba9\u0bbf|\u0bb9\u0b99\u0bcd\u0b95\u0bc7\u0bb0\u0bbf|\u0b85\u0baf\u0bb0\u0bcd\u0bb2\u0bbe\u0ba8\u0bcd\u0ba4\u0bc1|\u0b87\u0ba4\u0bcd\u0ba4\u0bbe\u0bb2\u0bbf|\u0ba8\u0bc6\u0ba4\u0bb0\u0bcd\u0bb2\u0bbe\u0ba8\u0bcd\u0ba4\u0bc1|\u0ba8\u0bbe\u0bb0\u0bcd\u0bb5\u0bc7|\u0baa\u0bc7\u0bbe\u0bb2\u0ba8\u0bcd\u0ba4\u0bc1|\u0baa\u0bc7\u0bbe\u0bb0\u0bcd\u0b9a\u0bcd\u0b9a\u0bc1\u0b95\u0bb2\u0bcd|\u0bb0\u0bc1\u0bae\u0bc7\u0ba9\u0bbf\u0baf\u0bbe|\u0bb0\u0bb7\u0bcd\u0baf\u0bbe|\u0bb8\u0bcd\u0baa\u0bc6\u0baf\u0bbf\u0ba9\u0bcd|\u0bb8\u0bcd\u0bb5\u0bc0\u0b9f\u0ba9\u0bcd|\u0b9a\u0bc1\u0bb5\u0bbf\u0b9a\u0bcd\u0b9a\u0bb0\u0bcd\u0bb2\u0bbe\u0ba8\u0bcd\u0ba4\u0bc1|\u0b87\u0b99\u0bcd\u0b95\u0bbf\u0bb2\u0bbe\u0ba8\u0bcd\u0ba4\u0bc1|\u0b95\u0ba9\u0b9f\u0bbe|\u0b85\u0bae\u0bc6\u0bb0\u0bbf\u0b95\u0bcd\u0b95\u0bbe)


###########################################################################################
# skipRegEx: These are the words, seperated by |, that are commonly used with numbers. 
# To match addresses of various countries we need to make the regular expression very generic
# and might match non-addresses as well.
#
#For example, both of the following are considered addresses: 
# "2500 fashion island blvd, san mateo, ca 94403" is an address.
# "2500 major bugs found in Zimbra, out of 94403 bugs" is NOT an address.
#
# So we have the following commonly used words like: "out of" or "as many" etc to ignore after
# we have matched.
#When translating, please use what ever words or set of words that's commonly used with numbers
# and seperate them with "|"
#You can leave it blank if there are no such words.
###########################################################################################

skipRegex = \u0b87\u0ba4\u0bbf\u0bb2\u0bcd |\u0baa\u0bb2|\u0b87\u0ba4\u0bbf\u0bb2\u0bbf\u0bb0\u0bc1\u0ba8\u0bcd\u0ba4\u0bc1|\u0b8e\u0ba4\u0bc1\u0bb5\u0bc1\u0bae\u0bcd \u0b87\u0bb2\u0bcd\u0bb2\u0bc8|\u0b9a\u0bbf\u0bb1\u0bbf\u0baf|\u0b8e\u0b99\u0bcd\u0b95\u0bc7

###########################################################################################
# clear string
# the string which is dirty in matched address, and need to be cleaned.
#
clearString =