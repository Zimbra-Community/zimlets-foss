#
# ***** BEGIN LICENSE BLOCK *****
# Zimbra Collaboration Suite Zimlets
# Copyright (C) 2011, 2012, 2013, 2014, 2016 Synacor, Inc.
#
# This program is free software: you can redistribute it and/or modify it under
# the terms of the GNU General Public License as published by the Free Software Foundation,
# version 2 of the License.
#
# This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY;
# without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
# See the GNU General Public License for more details.
# You should have received a copy of the GNU General Public License along with this program.
# If not, see <https://www.gnu.org/licenses/>.
# ***** END LICENSE BLOCK *****

label = Google\u30de\u30c3\u30d7
description = Google\u30de\u30c3\u30d7\u3092\u4f7f\u7528\u3057\u3066\u4f4f\u6240\u3092\u30cf\u30a4\u30e9\u30a4\u30c8\u3057\u3066\u30d7\u30ec\u30d3\u30e5\u30fc\u3057\u307e\u3059\u3002

##########################################################################################
# define the map display language

mapLanguage=



###########################################################################################
#completeAddressRegex - Contains RegEx to uniquely match an address. 
#
#If this is not blank, the zimlet uses: completeAddressRegex
#If this is blank, then the Zimlet uses: addressFirstPartRegEx AND (zipCodeRegEx OR countryNameRegEx)
#
#PS: In most non-english speaking countries(like Japanese), just populating this should be enough.
###########################################################################################
completeAddressRegex = [\u6771\u5927\u795e\u611b\u57fc\u5343\u5317\u5175\u798f\u9759\u8328\u5e83\u4eac\u65b0\u5bae\u9577\u5c90\u7fa4\u6803\u5ca1\u4e09\u718a\u9e7f\u5c71\u9752\u5948\u5ca9\u6ecb\u6c96\u77f3\u79cb\u5bcc\u548c\u9999\u4f50\u5fb3\u9ad8\u5cf6\u9ce5]\\W{1,2}[\u90fd\u9053\u5e9c\u770c](\\W+[\u90e1\u5e02\u533a\u753a\u6751\u5cf6]){1,2}\\W{1,20}([\\d\uff10\uff11\uff12\uff13\uff14\uff15\uff16\uff17\uff18\uff19]+([?\u2015\uff0d\u30fc-]|\u4e01\u76ee|\u756a\u5730|\u756a|\u53f7)?)*


###########################################################################################
#addressFirstPartRegEx is the regex to match the main/first part of the address *excluding* Zip code or countryName)
#This will be concatenated with zipCodeRegEx(to include zipcodes and then with countryNameRegEx(to include countrynames, as
# at times zipcodes will be missing but only country names are available).
#Matches a word with numbers followed by up to 9 words. PS: This will be concatenated with zipCodeRegEx.
#E.x. 1500 fashion island blvd, suite 200
#REGEX DEV NOTES:
#IE hangs if we regex backtracks(when there condition appears(starts to match) but at the end actually doesnt(fails).
#To avoid backtracking, use lazy and atomic groups.
#?? means lazy(instead of greedy). (?=(2-9words)\1 simulates "Atomic Groups"
###########################################################################################
addressFirstPartRegEx = \\d+?-??\\d{0,5},??\\s(?=((\\w+\\W+){2,9}))\\1
###########################################################################################
#zipCodeRegEx allows matching zip codes.
#
# Internally Zimlet will load all the regexes in the following fashion:
# "mainAddressRegEx AND (zipCodeRegEx OR countryNameRegEx)"
#
###########################################################################################


#The following matches US Zip codes
#  (\\d{5,7}(-\\d{4,5})?)
#The following matches Canadian and EU zip codes which is 2, 3-letters alpha-numeric words  for example: "7L7 T2E"
#(([a-zA-Z]{1,2}\\d{1,2}[a-zA-Z]{1,2}\\s?)|(\\d{1,2}[a-zA-Z]{1,2}\\d{1,2}\\s?))+

zipCodeRegEx = (\\d{5,7}(-\\d{4,5})?)|(([a-zA-Z]{1,2}\\d{1,2}[a-zA-Z]{1,2}\\s?)|(\\d{1,2}[a-zA-Z]{1,2}\\d{1,2}\\s?))+


#Matches Country names. Used instead of zip code and when they are missing.
countryNameRegEx = (Austria|Belgium|Bulgaria|Croatia|CzechRepublic|Denmark|Finland|France|Germany|Hungary|Ireland|Italy|Netherlands|Norway|Poland|Portugal|Romania|Russia|Spain|Sweden|Switzerland|UK|Canada|USA)


###########################################################################################
# skipRegEx: These are the words, seperated by |, that are commonly used with numbers. 
# To match addresses of various countries we need to make the regular expression very generic
# and might match non-addresses as well.
#
#For example, both of the following are considered addresses: 
# "2500 fashion island blvd, san mateo, ca 94403" is an address.
# "2500 major bugs found in Zimbra, out of 94403 bugs" is NOT an address.
#
# So we have the following commonly used words like: "out of" or "as many" etc to ignore after
# we have matched.
#When translating, please use what ever words or set of words that's commonly used with numbers
# and seperate them with "|"
#You can leave it blank if there are no such words.
###########################################################################################

skipRegex = of which|as many|out of|none of|little as|where as

###########################################################################################
# clear string
# the string which is dirty in matched address, and need to be cleaned.
#
clearString =