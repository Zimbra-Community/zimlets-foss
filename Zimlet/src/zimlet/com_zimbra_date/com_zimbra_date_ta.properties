#
# ***** BEGIN LICENSE BLOCK *****
# Zimbra Collaboration Suite Zimlets
# Copyright (C) 2008, 2009, 2010, 2011, 2012, 2013, 2014, 2016 Synacor, Inc.
#
# This program is free software: you can redistribute it and/or modify it under
# the terms of the GNU General Public License as published by the Free Software Foundation,
# version 2 of the License.
#
# This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY;
# without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
# See the GNU General Public License for more details.
# You should have received a copy of the GNU General Public License along with this program.
# If not, see <https://www.gnu.org/licenses/>.
# ***** END LICENSE BLOCK *****
#
# Local specific properties file for date zimlet

label = \u0ba4\u0bc7\u0ba4\u0bbf
description = \u0ba4\u0bc7\u0ba4\u0bbf\u0b95\u0bb3\u0bc8\u0ba4\u0bcd \u0ba4\u0ba9\u0bbf\u0baa\u0bcd\u0baa\u0baf\u0ba9\u0bbe\u0b95\u0bcd\u0b95\u0bc1\u0bae\u0bcd, \u0ba4\u0bca\u0b9f\u0bb0\u0bcd\u0baa\u0bbe\u0ba9 \u0b9a\u0ba8\u0bcd\u0ba4\u0bbf\u0baa\u0bcd\u0baa\u0bc1\u0b95\u0bb3\u0bc8 \u0bae\u0bc1\u0ba9\u0bcd\u0ba9\u0bcb\u0b9f\u0bcd\u0b9f\u0bae\u0bcd \u0b95\u0bbe\u0b9f\u0bcd\u0b9f\u0bc1\u0bae\u0bcd \u0bae\u0bb1\u0bcd\u0bb1\u0bc1\u0bae\u0bcd \u0ba8\u0bbe\u0b9f\u0bcd\u0b95\u0bbe\u0b9f\u0bcd\u0b9f\u0bbf\u0b95\u0bcd\u0b95\u0bbe\u0ba9 \u0b93\u0bb0\u0bcd \u0b87\u0ba3\u0bc8\u0baa\u0bcd\u0baa\u0bc8 \u0b89\u0bb0\u0bc1\u0bb5\u0bbe\u0b95\u0bcd\u0b95\u0bc1\u0bae\u0bcd.

#Context menu labels
viewDay = \u0ba8\u0bbe\u0bb3\u0bcd
appointmentNewTitle = \u0baa\u0bc1\u0ba4\u0bbf\u0baf \u0b9a\u0ba8\u0bcd\u0ba4\u0bbf\u0baa\u0bcd\u0baa\u0bc1
searchForMessages = \u0b85\u0b9e\u0bcd\u0b9a\u0bb2\u0bcd \u0b9a\u0bc6\u0baf\u0bcd\u0ba4\u0bbf\u0b95\u0bb3\u0bc8\u0ba4\u0bcd \u0ba4\u0bc7\u0b9f\u0bc1

# NOTE: These are here because translators often translate *everything*
#       in a message file, even reserved keywords! So we provide a way
#       to specify translations of those keywords. It avoids a lot of
#       issues this way...

boundaryTrue = \u0b9a\u0bb0\u0bbf
boundaryFalse = \u0ba4\u0bb5\u0bb1\u0bc1

#
# Date matching formats
#

# The format{number}.pattern messages contain the regular-expression
# pattern that will be used when looking for matches in text. They
# are standard JavaScript RegExp patterns with a few differences:
#
# 0) All patterns are prefixed and suffixed with the word-boundary
#    regular expression pattern "\\b" by default
#
# This keeps the patterns defined in the translation file clean and
# easier to read. If the pattern should NOT be modified with word-
# boundaries, then the the format{number}.boundary message should
# be set to "false" (or whatever boundaryFalse is defined as).
#
# 1) All occurrences of a space will be replaced by \\s+
#
# This is a convenience so that it's easier for translators to
# understand and create the patterns for the various locales.
#
# 2) All occurrences of (...) will be replaced by (?:...)
#
# Again, this makes the pattern more readable and will cause less
# translation errors.
#
# 3) All occurrences of {keyword} will be replaced by a
#    regular expression for that keyword match.
#
# The following keyword replacements are supported:
#
#   {number}     A number
#   {yearnum}    The 2 or 4-digit year
#   {monthnum}   The month number (January = 1, ...)
#   {monthname}  The name of a month consisting of all of the
#                possible month names defined in AjxMsg: from
#                AjxMsg["calc.monthname.january"] through
#                AjxMsg["calc.monthname.december"].
#   {datenum}    The date number of the month (1..31)
#   {dayname}    The name of the day of the week (Monday, ...)
#   {weekord}    The week ordinal (first, second, ... last)
#   {timenum}    Matches time in 12hr format 1:00 format or simply 1-12
#   {militarytimenum}   Matches time in 24hr format 0000 - 2359
#
# For each pattern, there is a format{number}.rule message that
# describes how to convert the matched text into the equivalent
# Date object. These messages follow a specific pattern which
# contains keywords. These keywords are defined in AjxMsg and
# must match or else the patterns will not map correctly to the
# date they represent.
#
# Each date calculator rule is a string that specifies the base
# date/time, optionally followed by a sequence of adjustments to
# that date/time. The base date/time can be specified in two ways.
# It can be specified as the context date/time object using the
# following keyword:
#
#   now
#
# And you can specify a specific date/time using any of the
# following formats: [Note: these patterns follow the formats
# documented in java.util.SimpleDateFormat.]
#
#   yyyy-MM-dd
#   yyyy-MM-dd'T'HH:mm:ss
#   yyyy-MM-dd'T'HH:mm:ss'Z'
#
# NOTE: The last format represents a UTC date; the returned
#       date object is adjusted to local system time.
#
# The following adjustments can be made after specifying the base
# date/time:
#
#   +{number} (second[s]|minute[s]|hour[s]|day[s]|week[s]|month[s]|year[s])
#   +{number} {monthname}
#   +{number} {dayname}
#   -{number} (second[s]|minute[s]|hour[s]|day[s]|week[s]|month[s]|year[s])
#   -{number} {month_name}
#   -{number} {day_name}
#   milliseconds={milliseconds}
#   seconds={seconds}[,{milliseconds}]
#   minutes={minutes}[,{seconds}[,{milliseconds}]]
#   hours={hours}[,{minutes}[,{seconds}[,{milliseconds}]]]
#   date={date}
#   week={weekord}[,{dayname}]
#   month={month}[,{date}]
#   year={year}[,{month}[,{date}]]
#
# NOTE: A translation can add as many (or as few) patterns as they want.
#       The only requirement is that the last pattern be designed with
#       the message "###".
#
# NOTE: Order is important. The patterns that appear first will execute
#       first and their matches will take precedence over later ones.

format.boundary = true

format1.pattern = (\u0b87\u0ba9\u0bcd\u0bb1\u0bc1|\u0b87\u0ba9\u0bcd\u0bb1\u0bbf\u0bb0\u0bb5\u0bc1|\u0b87\u0ba9\u0bcd\u0bb1\u0bc1 \u0b95\u0bbe\u0bb2\u0bc8)
format1.rule = now

format2.pattern = (\u0ba8\u0bbe\u0bb3\u0bc8 \u0b87\u0bb0\u0bb5\u0bc1|\u0ba8\u0bbe\u0bb3\u0bc8 \u0b95\u0bbe\u0bb2\u0bc8|\u0ba8\u0bbe\u0bb3\u0bc8)
format2.rule = now +1 day

format3.pattern = (\u0ba8\u0bc7\u0bb1\u0bcd\u0bb1\u0bc1 \u0b87\u0bb0\u0bb5\u0bc1|\u0ba8\u0bc7\u0bb1\u0bcd\u0bb1\u0bc1\u0b95\u0bcd \u0b95\u0bbe\u0bb2\u0bc8|\u0ba8\u0bc7\u0bb1\u0bcd\u0bb1\u0bc1)
format3.rule = now -1 day

# e.g. next Thursday
format4.pattern = (\u0b87\u0ba8\u0bcd\u0ba4|\u0b85\u0b9f\u0bc1\u0ba4\u0bcd\u0ba4) {dayname}
format4.rule = now +1 {dayname}

# e.g. last Thursday
format5.pattern = \u0b95\u0b9f\u0bc8\u0b9a\u0bbf {dayname}
format5.rule = now -1 {dayname}

# e.g. first Wed in April
format6.pattern = {weekord} {dayname} (\u0b87\u0ba4\u0ba9\u0bcd|\u0b87\u0ba4\u0bbf\u0bb2\u0bcd) {monthname}
format6.rule = now date=1 +1 {monthname} week={weekord},{dayname}

# e.g. third Monday
format7.pattern = {weekord} {dayname}
format7.rule = now week={weekord},{dayname}

# e.g. 1st of Dec
format8.pattern = {datenum}(\u0bb5\u0ba4\u0bc1|\u0bb5\u0ba4\u0bc1|\u0bb5\u0ba4\u0bc1|\u0bb5\u0ba4\u0bc1)? (\u0b87\u0ba4\u0ba9\u0bcd|\u0b87\u0ba4\u0bbf\u0bb2\u0bcd) {monthname}
format8.rule = now month={monthname},{datenum}

# e.g Sep 20th, 11:00 am
format9.pattern = {monthname} {datenum}(\u0bb5\u0ba4\u0bc1|\u0bb5\u0ba4\u0bc1|\u0bb5\u0ba4\u0bc1|\u0bb5\u0ba4\u0bc1)?.? {timenum}.?(\u0bae\u0bc1.\u0baa|\u0baa\u0bbf.\u0baa)
format9.rule = now month={monthname},{datenum}

# e.g 18th Oct 11:30 pm
format10.pattern = {datenum}(\u0bb5\u0ba4\u0bc1|\u0bb5\u0ba4\u0bc1|\u0bb5\u0ba4\u0bc1|\u0bb5\u0ba4\u0bc1)? {monthname} {timenum}.?(\u0bae\u0bc1.\u0baa|\u0baa\u0bbf.\u0baa)
format10.rule = now month={monthname},{datenum}

# e.g Sep 20th, 1100 Hrs
format11.pattern = {monthname} {datenum}(\u0bb5\u0ba4\u0bc1|\u0bb5\u0ba4\u0bc1|\u0bb5\u0ba4\u0bc1|\u0bb5\u0ba4\u0bc1).? {militarytimenum} (\u0bae\u0ba3\u0bbf\u0ba8\u0bc7\u0bb0\u0bae\u0bcd|\u0bae\u0ba3\u0bbf\u0ba8\u0bc7\u0bb0\u0bae\u0bcd)
format11.rule = now month={monthname},{datenum}

# e.g 18th Oct 1100 Hrs
format12.pattern = {datenum}(\u0bb5\u0ba4\u0bc1|\u0bb5\u0ba4\u0bc1|\u0bb5\u0ba4\u0bc1|\u0bb5\u0ba4\u0bc1).? {monthname}.? {militarytimenum} (\u0bae\u0ba3\u0bbf\u0ba8\u0bc7\u0bb0\u0bae\u0bcd|\u0bae\u0ba3\u0bbf\u0ba8\u0bc7\u0bb0\u0bae\u0bcd)
format12.rule = now month={monthname},{datenum}

# e.g. Jan 16th, 1973
format13.pattern = {monthname} {datenum}(\u0bb5\u0ba4\u0bc1|\u0bb5\u0ba4\u0bc1|\u0bb5\u0ba4\u0bc1|\u0bb5\u0ba4\u0bc1).? {yearnum}
format13.rule = now year={yearnum},{monthname},{datenum}

# e.g. Wed, 30 January 1980
format14.pattern = {dayname}.? {datenum} {monthname} {yearnum}
format14.rule = now year={yearnum},{monthname},{datenum}

# e.g. Wednesday, October 08
format15.pattern = {dayname}.? {monthname}  {datenum}
format15.rule = now month={monthname},{datenum}

# e.g. Jan 16th
format16.pattern = {monthname} {datenum}(\u0bb5\u0ba4\u0bc1|\u0bb5\u0ba4\u0bc1|\u0bb5\u0ba4\u0bc1|\u0bb5\u0ba4\u0bc1)?
format16.rule = now month={monthname},{datenum}

# e.g. 30 January 1980
format17.pattern = {datenum} {monthname}.? {yearnum}
format17.rule = now year={yearnum},{monthname},{datenum}

# e.g. 9/23/1970
format18.pattern = {monthnum}/{datenum}/{yearnum}
format18.rule = now year={yearnum},{monthnum},{datenum}

# e.g. 1970-09-23
format19.pattern = {yearnum}-{monthnum}-{datenum}
format19.rule = now year={yearnum},{monthnum},{datenum}

# e.g. Mar 2008
# NOTE: Set the first day of the month to avoid roll-over!
# Matching monthname only if followed by year [bug 30634]
format20.pattern = {monthname} {yearnum}
format20.rule = now year={yearnum},{monthname},1

# e.g. Thurs
format21.pattern = {dayname}
format21.rule = now +1 {dayname}

# e.g. 16th Jan, 1973
format22.pattern = {datenum}(\u0bb5\u0ba4\u0bc1|\u0bb5\u0ba4\u0bc1|\u0bb5\u0ba4\u0bc1|\u0bb5\u0ba4\u0bc1)? {monthname}.? {yearnum}
format22.rule = now year={yearnum},{monthname},{datenum}

# Some US holidays -- these can be overwritten per locale
# to be any holiday(s) that make sense for that region.
format23.pattern = \u0ba8\u0ba9\u0bcd\u0bb1\u0bbf \u0ba4\u0bc6\u0bb0\u0bbf\u0bb5\u0bbf\u0ba4\u0bcd\u0ba4\u0bb2\u0bcd
format23.rule = now month=November week=fourth,Thursday

format24.pattern = \u0b95\u0bbf\u0bb1\u0bbf\u0bb8\u0bcd\u0ba4\u0bc1\u0bae\u0bb8\u0bc1\u0b95\u0bcd\u0b95\u0bc1 \u0bae\u0bc1\u0ba8\u0bcd\u0ba4\u0bc8\u0baf \u0ba8\u0bbe\u0bb3\u0bcd \u0bae\u0bbe\u0bb2\u0bc8
format24.rule= now month=\u0b9f\u0bbf\u0b9a\u0bae\u0bcd\u0baa\u0bb0\u0bcd, 24

format25.pattern = \u0b95\u0bbf\u0bb1\u0bbf\u0bb8\u0bcd\u0ba4\u0bc1\u0bae\u0bb8\u0bcd
format25.rule = now month=December,25

format26.pattern = \u0baa\u0bc1\u0ba4\u0bcd\u0ba4\u0bbe\u0ba3\u0bcd\u0b9f\u0bc1\u0b95\u0bcd\u0b95\u0bc1 \u0bae\u0bc1\u0ba8\u0bcd\u0ba4\u0bc8\u0baf \u0ba8\u0bbe\u0bb3\u0bcd \u0bae\u0bbe\u0bb2\u0bc8
format26.rule = now month=December,31

format27.pattern = \u0baa\u0bc1\u0ba4\u0bcd\u0ba4\u0bbe\u0ba3\u0bcd\u0b9f\u0bc1 \u0ba8\u0bbe\u0bb3\u0bcd
format27.rule = now +1 year month=January,1

# NOTE: Placeholders so that more formats can be added.
#
# Here is an example of a holiday
#
#   format15.pattern = Christmas
#   format15.rule = now month=12,25
#
# Here is an example of the Japanese Meiji-era year. Notice
# the use of specifying of the "format16.boundary" message.
# This tells the date zimlet to NOT create the corresponding
# regular expression with word-boundary (\\b) around the
# pattern. By default, these are added for convenience so
# that the pattern are more human-readable. But adding them
# for Asian patterns makes matching fail.
#
#   format16.pattern = \u660e\u6cbb{number}\u5e74
#   format16.rule = 1868-01-25 +{number} years -1 year
#   format16.boundary = false
#
# NOTE: The "-1 year" in the above example is extraneous
#       because I could just decrement the start of the Meiji
#       era by one. You need to either subtract one year from
#       the base date or subtract one year after the calculation
#       because Meiji 1 is 1868. But the rule "1868-01-25 +1 year"
#       would be 1869! So we subtract one year at the end.

format28.pattern = ###
