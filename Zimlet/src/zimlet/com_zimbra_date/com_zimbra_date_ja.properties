#
# ***** BEGIN LICENSE BLOCK *****
# Zimbra Collaboration Suite Zimlets
# Copyright (C) 2009, 2010, 2011, 2012, 2013, 2014, 2016 Synacor, Inc.
#
# This program is free software: you can redistribute it and/or modify it under
# the terms of the GNU General Public License as published by the Free Software Foundation,
# version 2 of the License.
#
# This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY;
# without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
# See the GNU General Public License for more details.
# You should have received a copy of the GNU General Public License along with this program.
# If not, see <https://www.gnu.org/licenses/>.
# ***** END LICENSE BLOCK *****
#
# Local specific properties file for date zimlet

label = \u65e5\u4ed8
description = \u65e5\u4ed8\u3092\u30cf\u30a4\u30e9\u30a4\u30c8\u3057\u3001\u95a2\u9023\u4ed8\u3051\u3089\u308c\u305f\u4e88\u5b9a\u3092\u30d7\u30ec\u30d3\u30e5\u30fc\u3057\u3066\u30ab\u30ec\u30f3\u30c0\u30fc\u3078\u306e\u30ea\u30f3\u30af\u3092\u4f5c\u6210\u3057\u307e\u3059\u3002

#Context menu labels
viewDay = \u65e5
appointmentNewTitle = \u65b0\u3057\u3044\u4e88\u5b9a
searchForMessages = \u30e1\u30fc\u30eb\u30e1\u30c3\u30bb\u30fc\u30b8\u3092\u691c\u7d22

# NOTE: These are here because translators often translate *everything*
#       in a message file, even reserved keywords! So we provide a way
#       to specify translations of those keywords. It avoids a lot of
#       issues this way...

boundaryTrue = true
boundaryFalse = false

#
# Date matching formats
#

# The format{number}.pattern messages contain the regular-expression
# pattern that will be used when looking for matches in text. They
# are standard JavaScript RegExp patterns with a few differences:
#
# 0) All patterns are prefixed and suffixed with the word-boundary
#    regular expression pattern "\\b" by default
#
# This keeps the patterns defined in the translation file clean and
# easier to read. If the pattern should NOT be modified with word-
# boundaries, then the the format{number}.boundary message should
# be set to "false" (or whatever boundaryFalse is defined as).
#
# 1) All occurrences of a space will be replaced by \\s+
#
# This is a convenience so that it's easier for translators to
# understand and create the patterns for the various locales.
#
# 2) All occurrences of (...) will be replaced by (?:...)
#
# Again, this makes the pattern more readable and will cause less
# translation errors.
#
# 3) All occurrences of {keyword} will be replaced by a
#    regular expression for that keyword match.
#
# The following keyword replacements are supported:
#
#   {number}     A number
#   {yearnum}    The 2 or 4-digit year
#   {monthnum}   The month number (January = 1, ...)
#   {monthname}  The name of a month consisting of all of the
#                possible month names defined in AjxMsg: from
#                AjxMsg["calc.monthname.january"] through
#                AjxMsg["calc.monthname.december"].
#   {datenum}    The date number of the month (1..31)
#   {dayname}    The name of the day of the week (Monday, ...)
#   {weekord}    The week ordinal (first, second, ... last)
#   {timenum}    Matches time in 12hr format 1:00 format or simply 1-12
#   {militarytimenum}   Matches time in 24hr format 0000 - 2359
#
# For each pattern, there is a format{number}.rule message that
# describes how to convert the matched text into the equivalent
# Date object. These messages follow a specific pattern which
# contains keywords. These keywords are defined in AjxMsg and
# must match or else the patterns will not map correctly to the
# date they represent.
#
# Each date calculator rule is a string that specifies the base
# date/time, optionally followed by a sequence of adjustments to
# that date/time. The base date/time can be specified in two ways.
# It can be specified as the context date/time object using the
# following keyword:
#
#   now
#
# And you can specify a specific date/time using any of the
# following formats: [Note: these patterns follow the formats
# documented in java.util.SimpleDateFormat.]
#
#   yyyy-MM-dd
#   yyyy-MM-dd'T'HH:mm:ss
#   yyyy-MM-dd'T'HH:mm:ss'Z'
#
# NOTE: The last format represents a UTC date; the returned
#       date object is adjusted to local system time.
#
# The following adjustments can be made after specifying the base
# date/time:
#
#   +{number} (second[s]|minute[s]|hour[s]|day[s]|week[s]|month[s]|year[s])
#   +{number} {monthname}
#   +{number} {dayname}
#   -{number} (second[s]|minute[s]|hour[s]|day[s]|week[s]|month[s]|year[s])
#   -{number} {month_name}
#   -{number} {day_name}
#   milliseconds={milliseconds}
#   seconds={seconds}[,{milliseconds}]
#   minutes={minutes}[,{seconds}[,{milliseconds}]]
#   hours={hours}[,{minutes}[,{seconds}[,{milliseconds}]]]
#   date={date}
#   week={weekord}[,{dayname}]
#   month={month}[,{date}]
#   year={year}[,{month}[,{date}]]
#
# NOTE: A translation can add as many (or as few) patterns as they want.
#       The only requirement is that the last pattern be designed with
#       the message "###".
#
# NOTE: Order is important. The patterns that appear first will execute
#       first and their matches will take precedence over later ones.

#Note: This *must* be false for all asian languages.
format.boundary = false

format1.pattern = (\u4eca\u65e5|\u4eca\u591c|\u4eca\u671d)
format1.rule = now

format2.pattern = (\u660e\u65e5\u306e\u591c|\u660e\u65e5\u306e\u671d|\u660e\u65e5)
format2.rule = now +1 day

format3.pattern = (\u6628\u591c|\u6628\u65e5\u306e\u671d|\u6628\u65e5)
format3.rule = now -1 day

# e.g. next Thursday
format4.pattern = (\u4eca\u9031\u306e|\u6765\u9031\u306e){dayname}
format4.rule = now +1 {dayname}

# e.g. last Thursday
format5.pattern = \u5148\u9031\u306e{dayname}
format5.rule = now -1 {dayname}


#this week (simply shows today's as we cant map "this week" to any  specific-day
format6.pattern = \u4eca\u9031
format6.rule = now

#next week (is mapped to 7th day as we cant map "next week" to any specific-day)
format7.pattern = \u6765\u9031
format7.rule = now +7 day

#last week (is mapped to last week's day (-7th days) as we cant map "next week" to any specific-day)
format8.pattern = \u5148\u9031
format8.rule = now -7 day

#day before yesterday
format9.pattern = \u304a\u3068\u3068\u3044
format9.rule = now -2 day

#day after tomorrow
format10.pattern = day after tomorrow
format10.rule = now +2 day

# e.g Sep 20th, 1100 Hrs
format11.pattern = {monthname}{datenum}\u65e5\u3001{militarytimenum}\u6642
format11.rule = now month={monthname},{datenum}

# e.g 18th Oct 1100 Hrs
format12.pattern = {monthname}{datenum}\u65e5\u3001{militarytimenum}\u6642
format12.rule = now month={monthname},{datenum}

# e.g Sep 20th, 11:00 am
format13.pattern = {monthname}{datenum}\u65e5\u3001{timenum}(am|pm)
format13.rule = now month={monthname},{datenum}

# e.g 18th Oct 11:30 pm
format14.pattern = {monthname}{datenum}\u65e5\u3001{timenum}(am|pm)
format14.rule = now month={monthname},{datenum}

# e.g. [Japanese Heisei word]23[year-number]12[[month-number]31[daynumber] means 1988+23/12/31 or 2011/12/31 (Japanese only)
format15.pattern = \u5e73\u6210{yearnum}\u5e74{monthnum}\u6708{datenum}\u65e5
format15.rule = now year=H{yearnum},{monthnum},{datenum}

# e.g. [Japanese Heisei word]H23.8.31 means 1988+23.12.31 = 2011.12.31 (Japanese only)
format16.pattern = H{yearnum}.{monthnum}.{datenum}
format16.rule = now year=H{yearnum},{monthnum},{datenum}

# e.g. [Japanese Heisei word]H23/8/31 means 1988+23.12.31 = 2011/12/31 (Japanese only)
format17.pattern = H{yearnum}/{monthnum}/{datenum}
format17.rule = now year=H{yearnum},{monthnum},{datenum}

# e.g. 2011[year]9[month]23[Date] means Aug 23rd 2011(Japanese only)
#Note: always match longer pattern[like: 2011/12/31] *before* smaller one[like: 12/31] as the year could be different
format18.pattern = {yearnum}\u5e74{monthnum}\u6708{datenum}\u65e5
format18.rule = now year={yearnum},{monthnum},{datenum}


# e.g. 2010[year-number]8[month-number] means Aug 2010 (Japanese only)
#Note: Since there is no day-number, we map to 1st
#Note: always match longer pattern[like: 2011/12/31] *before* smaller one[like: 12/31] as the year could be different
format19.pattern = {yearnum}\u5e74{monthnum}\u6708
format19.rule = now year={yearnum},{monthnum}

# e.g. 9[month-number]23[day-number] means Aug 31st (Japanese only)
#Note: always match longer pattern[like: 2011/12/31] *before* smaller one[like: 12/31] as the year could be different
format20.pattern = {monthnum}\u6708{datenum}\u65e5
format20.rule = now month={monthnum},{datenum}
 
# e.g. Thurs
format21.pattern = {dayname}
format21.rule = now +1 {dayname}

# e.g. 1970/09/23
format22.pattern = {yearnum}/{monthnum}/{datenum}
format22.rule = now year={yearnum},{monthnum},{datenum}

# e.g. 1970-09-23
format23.pattern = {yearnum}-{monthnum}-{datenum}
format23.rule = now year={yearnum},{monthnum},{datenum}

format24.pattern = ###
